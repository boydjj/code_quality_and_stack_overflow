import os
import pprint
import subprocess

import django_project, flask_project, requests_project, ansible_project, \
    tornado_project
import run_metrics


PROJECT_ROOT_DIR = '/Users/jboyd/dev_projects/oss'
DATA_ROOT_DIR = '../data'


def gather_commits(project):
    print "Gathering commits for project: {}".format(project.DIR)
    project_dir = os.path.join(PROJECT_ROOT_DIR, project.DIR)

    results = {}
    if hasattr(project, "BRANCH"):
        branch = project.BRANCH
    else:
        branch = 'master'

    for date in project.DATES:
        commit = subprocess.check_output(['git', 'rev-list', '-1',
                                          '--until="{}"'.format(date), branch],
                                         cwd=project_dir).strip()
        if not commit:
            # Some projects (e.g., Flask) don't have a commit as early as
            # the quarter's start date, so we just get the earliest one.
            commit = subprocess.check_output(['git', 'rev-list',
                                              '--max-parents=0', 'HEAD'],
                                             cwd=project_dir).strip()
        results[date] = commit

    return results


if __name__ == '__main__':
    projects = flask_project,

    for project in projects:
        commits = gather_commits(project)
        pprint.pprint(commits, indent=4)

        data_dir = os.path.join(DATA_ROOT_DIR, project.DIR)
        with open(os.path.join(data_dir, 'commits.txt'), 'w') as f:
            f.write('# This file auto-generated by scripts/gather_metrics.py\n\n')
            for date in sorted(commits.keys()):
                f.write('{}: {}\n'.format(date, commits[date]))

        project_dir = os.path.join(PROJECT_ROOT_DIR, project.DIR)
        for commit in commits.values():
            run_metrics.gather_metrics(commit, project_dir, data_dir)
